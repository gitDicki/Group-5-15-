import random
from random import shuffle
import numpy as np
def choice(x1, y1, x2, y2, x0, y0):# на вход подаются координаты выбранной ячейки,
    # координаты куда ползователь хочет сдвинуть эту ячейку и координаты ячейки где находится
    # пустая ячейка
    if x2 == x0 and y0 == y0:#проверяем, является ли место, куда пользователь двигает ячейку пустым
        if (x1 == x2) and (y1 == y2 + 1 or y1 == y2 - 1):#проверяем, является ли пустая ячейка
            #соседней с пустой ячейкой по оси OY
            return 1#Условие выполнено
        elif (y1 == y2) and (x1 == x2 + 1 or x1 == x2 - 1):#проверяем, является ли пустая ячейка
            #соседней с пустой ячейкой по оси OX
            return 1#Условие выполнено
        else:
            return 0#Условие не выполнено
def endgame(game):
    fail = 0
    for i in range(3):
        for j in range(3):
            if game[i][j] > game[i][j+1] and game[i][j] != 0: # проверяем соблюдение условия предущий
                # меньше последующего в строчке
                fail += 1
            if fail != 0:#преждевременное закрытие цикла, если условие не выполнено
                break
        if game[i][j+1] > game[i+1][0]: #проверяем выполнения условия для последнего элемента строки
            #и первого элемента следующей строки
            fail += 1
        if fail != 0:#преждевременное закрытие цикоа, если условие не выполнено
            break
    return fail

def start ():
    game = np.zeros((4, 4)) #формируем массив 4 на 4
    count = 0
    sum = []
    for i in range(16): #генерируем 16 рандомных чисел и записываем и х в sum=[]
        sum.append(count)
        count += 1
    random.shuffle(sum) #перемешиваем эти 16 чисел
    count = 0
    for i in range(4): #присваиваем эти числа к ячейкам массива
        for j in range(4):
            game[i][j] = sum[count]
            count += 1
    zero = [0, 0]
    for i in range(4):#Ищем нолик в матрице
        for j in range(4):
            if game[i][j] == 0:
                zero[0] = i
                zero[1] = j
    return game, zero
def field (game):#Просто рисовалка поля
    for i in game:
        print(' '.join([f"{int(j):>2}" for j in i]))#Красивый вывод поля по правому краю
def play():#Основной движок
    game, zero = start()#Генерим поле и ищем нолик
    field(game)#Выводим на экран текущее положение на поле
    while endgame(game) != 0:#Цикл идет пока пользователь не победит
        check = 0#Счетчик для проверки на дуралея
        while check == 0:#Пока пользователь не прекратит быть дуралеем, спрашиваем его значения координат
            #откуда он хочет двигаться и куда он хочет двигаться
            try:#Собираем значения, выводим пользователя из статуса дуралея
                print('Введите координаты клетки, которую будете двигать')
                x1 = int(input('Координата по оси ОХ --> '))
                y1 = int(input('Координата по оси ОY --> '))
                print('Ваша ячейка имеет значение:',int(game[x1][y1]))
                print('Введите координаты клетки, куда вы хотите ее подвинуть')
                x2 = int(input('Координата по оси ОХ --> '))
                y2 = int(input('Координата по оси ОY --> '))
                print('Ваша ячейка имеет значение:',int(game[x2][y2]))
                check = 1
            except:
                print('Похоже введенные вами координаты не подходили под формат')
        if choice(x1, y1, zero[0], zero[1], x2, y2):#Если условия обмена выполняются, меняем нолик с ячейкой
            #местами
            game[x1][y1], game[zero[0]][zero[1]] = game[zero[0]][zero[1]], game[x1][y1]
            zero[0], zero[1] = x1, y1#Запоминаем новые координаты нуля
            field(game)
        else:#Пользователь ошибся, передвижение невозможно
            print('Невозможно переместить ячейку в указанное место')
    print('Ура! Победа!')

play()






